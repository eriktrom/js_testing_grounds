// Generated by CoffeeScript 1.6.1
var OutputHolder;

OutputHolder = (function() {

  function OutputHolder() {}

  OutputHolder.prototype.setPublicProperty = function(key, value) {
    return this[key] = value;
  };

  return OutputHolder;

})();


function foo() {
  return 'global foo';
}

function bar() {
  return 'global bar';
}

function hoistMe() {

  outputHolder = new OutputHolder();
  outputHolder.setPublicProperty('typeOfFoo', typeof foo);
  outputHolder.setPublicProperty('typeOfBar', typeof bar);

  function foo() {
    return 'hoistMe foo';
  }

  var bar = function() {
    return 'hoistMe bar';
  };
}
hoistMe();
;

module("OutputHolder");

test("it sets public properties on instances of outputHolder", function() {
  var outputHolder;
  outputHolder = new OutputHolder();
  outputHolder.setPublicProperty('hello', 'world');
  return strictEqual(outputHolder.hello, 'world');
});

test("new OutputHolder() works identical to new OutputHolder;", function() {
  var outputHolder1, outputHolder2;
  outputHolder1 = new OutputHolder;
  outputHolder1.setPublicProperty('hello', 'from outputHolder1');
  strictEqual(outputHolder1.hello, 'from outputHolder1');
  outputHolder2 = new OutputHolder();
  outputHolder2.setPublicProperty('hello', 'from outputHolder2');
  return strictEqual(outputHolder2.hello, 'from outputHolder2');
});

module("Function Hoisting");

test("foo definition inside hoistMe gets assigned to global declaration of foo       variable before foo is even run", function() {
  return strictEqual(outputHolder.typeOfFoo, "function");
});

test("bar definition inside hoistMe does not get assigned to global", function() {
  return strictEqual(outputHolder.typeOfBar, "undefined");
});

test("that outputHolder is does not have hello property as defined in first test", function() {
  return ok(outputHolder.hello === void 0);
});
