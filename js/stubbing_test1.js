// Generated by CoffeeScript 1.6.2
var app;

app = (function() {
  var namespace;

  namespace = function(string) {
    var level, levels, object, _i, _len;

    object = this;
    levels = string.split(".");
    for (_i = 0, _len = levels.length; _i < _len; _i++) {
      level = levels[_i];
      if (typeof object[level] === "undefined") {
        object[level] = {};
      }
      object = object[level];
    }
    return object;
  };
  return {
    namespace: namespace
  };
})();

(function() {
  var stubFn, stubber;

  stubber = app.namespace("stubber");
  stubFn = function(returnedDependencyObject) {
    var fn;

    fn = function() {
      fn.called = true;
      fn.args = Array.prototype.slice.call(arguments);
      return returnedDependencyObject;
    };
    fn.called = false;
    return fn;
  };
  return stubber.stubFn = stubFn;
})();

(function() {
  var collaberatorFactory, createDependencyObject;

  collaberatorFactory = app.namespace("collaberatorFactory");
  createDependencyObject = function() {};
  collaberatorFactory.createDependencyObject = createDependencyObject;
  module("collaberatorFactory");
  test("is an object", function() {
    ok(typeof collaberatorFactory === "object");
    return ok(typeof collaberatorFactory !== "function");
  });
  module("collaberatorFactory#createDependencyObject");
  return test("is a function", function() {
    ok(typeof collaberatorFactory.createDependencyObject === "function");
    return ok(typeof collaberatorFactory.createDependencyObject !== "object");
  });
})();

/* src/sut.coffee
*/


(function() {
  var collaberatorFactory, myMethod, myObject;

  myObject = app.namespace("myObject");
  collaberatorFactory = app.collaberatorFactory;
  myMethod = function(myMethodArg) {
    var returnedDependencyObject;

    returnedDependencyObject = collaberatorFactory.createDependencyObject();
    return returnedDependencyObject.understoodMessage("createDependencyObjectArg", myMethodArg);
  };
  myObject.myMethod = myMethod;
  module("myObject");
  test("is an object", function() {
    return ok(typeof myObject === "object");
  });
  module("myObject#myMethod");
  return test("is a function", function() {
    return ok(typeof myObject.myMethod === "function");
  });
})();

/* test/stub_test.coffee
*/


(function() {
  var collaberatorFactory, myObject, stubber;

  collaberatorFactory = app.collaberatorFactory;
  myObject = app.myObject;
  stubber = app.stubber;
  module("app.stubber", {
    setup: function() {
      return this.originalCreateDependencyObject = collaberatorFactory.createDependencyObject;
    },
    teardown: function() {
      return collaberatorFactory.createDependencyObject = this.originalCreateDependencyObject;
    }
  });
  test("sets a flag when a method is called", function() {
    collaberatorFactory.createDependencyObject = stubber.stubFn({
      understoodMessage: function() {}
    });
    myObject.myMethod();
    return ok(collaberatorFactory.createDependencyObject.called);
  });
  return test("returns the object or value given through argument", function() {
    var returnedDependencyObjectDbl;

    returnedDependencyObjectDbl = stubber.stubFn();
    collaberatorFactory.createDependencyObject = stubber.stubFn({
      understoodMessage: returnedDependencyObjectDbl
    });
    myObject.myMethod("myMethodArg");
    return deepEqual(returnedDependencyObjectDbl.args, ["createDependencyObjectArg", "myMethodArg"]);
  });
})();

/* End example of stubbing
*/


/*
//@ sourceMappingURL=stubbing_test1.map
*/
